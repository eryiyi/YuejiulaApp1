package com.liangxun.yuejiula.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.liangxun.yuejiula.entity.SchoolFind;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SCHOOL_FIND.
*/
public class SchoolFindDao extends AbstractDao<SchoolFind, String> {

    public static final String TABLENAME = "SCHOOL_FIND";

    /**
     * Properties of entity SchoolFind.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property School_find_id = new Property(0, String.class, "school_find_id", true, "SCHOOL_FIND_ID");
        public final static Property Pic_url = new Property(1, String.class, "pic_url", false, "PIC_URL");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Www_url = new Property(3, String.class, "www_url", false, "WWW_URL");
        public final static Property Top_num = new Property(4, String.class, "top_num", false, "TOP_NUM");
        public final static Property Istype = new Property(5, String.class, "istype", false, "ISTYPE");
    };

    private DaoSession daoSession;


    public SchoolFindDao(DaoConfig config) {
        super(config);
    }
    
    public SchoolFindDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SCHOOL_FIND' (" + //
                "'SCHOOL_FIND_ID' TEXT PRIMARY KEY NOT NULL ," + // 0: school_find_id
                "'PIC_URL' TEXT," + // 1: pic_url
                "'TITLE' TEXT," + // 2: title
                "'WWW_URL' TEXT," + // 3: www_url
                "'TOP_NUM' TEXT," + // 4: top_num
                "'ISTYPE' TEXT);"); // 5: istype
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SCHOOL_FIND'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SchoolFind entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getSchool_find_id());
 
        String pic_url = entity.getPic_url();
        if (pic_url != null) {
            stmt.bindString(2, pic_url);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String www_url = entity.getWww_url();
        if (www_url != null) {
            stmt.bindString(4, www_url);
        }
 
        String top_num = entity.getTop_num();
        if (top_num != null) {
            stmt.bindString(5, top_num);
        }
 
        String istype = entity.getIstype();
        if (istype != null) {
            stmt.bindString(6, istype);
        }
    }

    @Override
    protected void attachEntity(SchoolFind entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SchoolFind readEntity(Cursor cursor, int offset) {
        SchoolFind entity = new SchoolFind( //
            cursor.getString(offset + 0), // school_find_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // pic_url
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // www_url
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // top_num
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // istype
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SchoolFind entity, int offset) {
        entity.setSchool_find_id(cursor.getString(offset + 0));
        entity.setPic_url(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setWww_url(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTop_num(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIstype(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(SchoolFind entity, long rowId) {
        return entity.getSchool_find_id();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(SchoolFind entity) {
        if(entity != null) {
            return entity.getSchool_find_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
