package com.liangxun.yuejiula.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.liangxun.yuejiula.entity.Relate;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table RELATE.
*/
public class RelateDao extends AbstractDao<Relate, String> {

    public static final String TABLENAME = "RELATE";

    /**
     * Properties of entity Relate.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property TypeId = new Property(1, String.class, "typeId", false, "TYPE_ID");
        public final static Property RecordId = new Property(2, String.class, "recordId", false, "RECORD_ID");
        public final static Property GoodsId = new Property(3, String.class, "goodsId", false, "GOODS_ID");
        public final static Property EmpId = new Property(4, String.class, "empId", false, "EMP_ID");
        public final static Property EmpTwoId = new Property(5, String.class, "empTwoId", false, "EMP_TWO_ID");
        public final static Property Cont = new Property(6, String.class, "cont", false, "CONT");
        public final static Property Dateline = new Property(7, String.class, "dateline", false, "DATELINE");
        public final static Property OrderId = new Property(8, String.class, "orderId", false, "ORDER_ID");
        public final static Property Is_read = new Property(9, String.class, "is_read", false, "IS_READ");
        public final static Property EmpName = new Property(10, String.class, "empName", false, "EMP_NAME");
        public final static Property EmpCover = new Property(11, String.class, "empCover", false, "EMP_COVER");
    };

    private DaoSession daoSession;


    public RelateDao(DaoConfig config) {
        super(config);
    }
    
    public RelateDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'RELATE' (" + //
                "'ID' TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "'TYPE_ID' TEXT," + // 1: typeId
                "'RECORD_ID' TEXT," + // 2: recordId
                "'GOODS_ID' TEXT," + // 3: goodsId
                "'EMP_ID' TEXT," + // 4: empId
                "'EMP_TWO_ID' TEXT," + // 5: empTwoId
                "'CONT' TEXT," + // 6: cont
                "'DATELINE' TEXT," + // 7: dateline
                "'ORDER_ID' TEXT," + // 8: orderId
                "'IS_READ' TEXT," + // 9: is_read
                "'EMP_NAME' TEXT," + // 10: empName
                "'EMP_COVER' TEXT);"); // 11: empCover
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'RELATE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Relate entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getId());
 
        String typeId = entity.getTypeId();
        if (typeId != null) {
            stmt.bindString(2, typeId);
        }
 
        String recordId = entity.getRecordId();
        if (recordId != null) {
            stmt.bindString(3, recordId);
        }
 
        String goodsId = entity.getGoodsId();
        if (goodsId != null) {
            stmt.bindString(4, goodsId);
        }
 
        String empId = entity.getEmpId();
        if (empId != null) {
            stmt.bindString(5, empId);
        }
 
        String empTwoId = entity.getEmpTwoId();
        if (empTwoId != null) {
            stmt.bindString(6, empTwoId);
        }
 
        String cont = entity.getCont();
        if (cont != null) {
            stmt.bindString(7, cont);
        }
 
        String dateline = entity.getDateline();
        if (dateline != null) {
            stmt.bindString(8, dateline);
        }
 
        String orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindString(9, orderId);
        }
 
        String is_read = entity.getIs_read();
        if (is_read != null) {
            stmt.bindString(10, is_read);
        }
 
        String empName = entity.getEmpName();
        if (empName != null) {
            stmt.bindString(11, empName);
        }
 
        String empCover = entity.getEmpCover();
        if (empCover != null) {
            stmt.bindString(12, empCover);
        }
    }

    @Override
    protected void attachEntity(Relate entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Relate readEntity(Cursor cursor, int offset) {
        Relate entity = new Relate( //
            cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // typeId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // recordId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // goodsId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // empId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // empTwoId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // cont
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // dateline
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // orderId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // is_read
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // empName
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // empCover
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Relate entity, int offset) {
        entity.setId(cursor.getString(offset + 0));
        entity.setTypeId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRecordId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGoodsId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEmpId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEmpTwoId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCont(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDateline(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setOrderId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIs_read(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setEmpName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setEmpCover(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Relate entity, long rowId) {
        return entity.getId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Relate entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
